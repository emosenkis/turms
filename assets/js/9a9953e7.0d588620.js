"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4546],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(n),h=l,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,i=new Array(o);i[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,i[1]=a;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},61377:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(87462),l=n(63366),o=(n(67294),n(3905)),i=["components"],a={sidebar_label:"config",title:"config"},s=void 0,c={unversionedId:"reference/config",id:"reference/config",title:"config",description:"PythonType Objects",source:"@site/docs/reference/config.md",sourceDirName:"reference",slug:"/reference/config",permalink:"/turms/docs/reference/config",editUrl:"https://github.com/jhnnsrs/turms/edit/master/website/docs/reference/config.md",tags:[],version:"current",frontMatter:{sidebar_label:"config",title:"config"},sidebar:"tutorialSidebar",previous:{title:"Operations Funcs",permalink:"/turms/docs/plugins/strawberry"},next:{title:"console",permalink:"/turms/docs/reference/console"}},u=[{value:"PythonType Objects",id:"pythontype-objects",children:[],level:2},{value:"FreezeConfig Objects",id:"freezeconfig-objects",children:[{value:"enabled",id:"enabled",children:[],level:4},{value:"types",id:"types",children:[],level:4},{value:"exclude",id:"exclude",children:[],level:4},{value:"include",id:"include",children:[],level:4},{value:"convert_list_to_tuple",id:"convert_list_to_tuple",children:[],level:4}],level:2},{value:"GeneratorConfig Objects",id:"generatorconfig-objects",children:[{value:"domain",id:"domain",children:[],level:4},{value:"out_dir",id:"out_dir",children:[],level:4},{value:"generated_name",id:"generated_name",children:[],level:4},{value:"documents",id:"documents",children:[],level:4},{value:"verbose",id:"verbose",children:[],level:4},{value:"object_bases",id:"object_bases",children:[],level:4},{value:"interface_bases",id:"interface_bases",children:[],level:4},{value:"always_resolve_interfaces",id:"always_resolve_interfaces",children:[],level:4},{value:"scalar_definitions",id:"scalar_definitions",children:[],level:4},{value:"freeze",id:"freeze",children:[],level:4},{value:"additional_bases",id:"additional_bases",children:[],level:4},{value:"additional_config",id:"additional_config",children:[],level:4},{value:"force_plugin_order",id:"force_plugin_order",children:[],level:4},{value:"parsers",id:"parsers",children:[],level:4},{value:"plugins",id:"plugins",children:[],level:4},{value:"processors",id:"processors",children:[],level:4},{value:"stylers",id:"stylers",children:[],level:4}],level:2},{value:"Extensions Objects",id:"extensions-objects",children:[{value:"turms",id:"turms",children:[],level:4}],level:2},{value:"GraphQLProject Objects",id:"graphqlproject-objects",children:[{value:"schema_url",id:"schema_url",children:[],level:4},{value:"bearer_token",id:"bearer_token",children:[],level:4},{value:"documents",id:"documents-1",children:[],level:4},{value:"extensions",id:"extensions",children:[],level:4}],level:2},{value:"GraphQLConfigMultiple Objects",id:"graphqlconfigmultiple-objects",children:[{value:"projects",id:"projects",children:[],level:4}],level:2},{value:"GraphQLConfigSingle Objects",id:"graphqlconfigsingle-objects",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"pythontype-objects"},"PythonType Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PythonType(str)\n")),(0,o.kt)("p",null,"A string that represents a python type. Either a builtin type or a type from a module."),(0,o.kt)("h2",{id:"freezeconfig-objects"},"FreezeConfig Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class FreezeConfig(BaseSettings)\n")),(0,o.kt)("p",null,"Configuration for freezing the generated pydantic\nmodels"),(0,o.kt)("p",null,"This is useful for when you want to generate the models\nthat are faux immutable and hashable by default. The configuration\nallows you to customize the way the models are frozen and specify\nwhich types (operation, fragment, input,...) should be frozen."),(0,o.kt)("h4",{id:"enabled"},"enabled"),(0,o.kt)("p",null,"Enabling this, will freeze the schema"),(0,o.kt)("h4",{id:"types"},"types"),(0,o.kt)("p",null,"The core types (Input, Fragment, Object, Operation) to freeze"),(0,o.kt)("h4",{id:"exclude"},"exclude"),(0,o.kt)("p",null,"List of types to exclude from freezing"),(0,o.kt)("h4",{id:"include"},"include"),(0,o.kt)("p",null,"The types to freeze"),(0,o.kt)("h4",{id:"convert_list_to_tuple"},"convert","_","list","_","to","_","tuple"),(0,o.kt)("p",null,"Convert GraphQL List to tuple (with varying length)"),(0,o.kt)("h2",{id:"generatorconfig-objects"},"GeneratorConfig Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class GeneratorConfig(BaseSettings)\n")),(0,o.kt)("p",null,"Configuration for the generator"),(0,o.kt)("p",null,"This is the main generator configuration that allows you to\ncustomize the way the models are generated."),(0,o.kt)("p",null,"You need to specify the documents that should be parsed\nand the scalars that should be used."),(0,o.kt)("h4",{id:"domain"},"domain"),(0,o.kt)("p",null,"The domain of the GraphQL API ( will be set as a config variable)"),(0,o.kt)("h4",{id:"out_dir"},"out","_","dir"),(0,o.kt)("p",null,"The output directory for the generated models"),(0,o.kt)("h4",{id:"generated_name"},"generated","_","name"),(0,o.kt)("p",null,"The name of the generated file within the output directory"),(0,o.kt)("h4",{id:"documents"},"documents"),(0,o.kt)("p",null,"The documents to parse. Setting this will overwrite the documents in the graphql config"),(0,o.kt)("h4",{id:"verbose"},"verbose"),(0,o.kt)("p",null,"Enable verbose logging"),(0,o.kt)("h4",{id:"object_bases"},"object","_","bases"),(0,o.kt)("p",null,"The base classes for the generated objects. This is useful if you want to change the base class from BaseModel to something else"),(0,o.kt)("h4",{id:"interface_bases"},"interface","_","bases"),(0,o.kt)("p",null,"List of base classes for interfaces"),(0,o.kt)("h4",{id:"always_resolve_interfaces"},"always","_","resolve","_","interfaces"),(0,o.kt)("p",null,"Always resolve interfaces to concrete types"),(0,o.kt)("h4",{id:"scalar_definitions"},"scalar","_","definitions"),(0,o.kt)("p",null,"Additional config for mapping scalars to python types (e.g. ID: str). Can use dotted paths to import types from other modules."),(0,o.kt)("h4",{id:"freeze"},"freeze"),(0,o.kt)("p",null,"Configuration for freezing the generated models: by default disabled"),(0,o.kt)("h4",{id:"additional_bases"},"additional","_","bases"),(0,o.kt)("p",null,"Additional bases for the generated models as map of GraphQL Type to importable base class (e.g. module.package.Class)"),(0,o.kt)("h4",{id:"additional_config"},"additional","_","config"),(0,o.kt)("p",null,"Additional config for the generated models as map of GraphQL Type to config attributes"),(0,o.kt)("h4",{id:"force_plugin_order"},"force","_","plugin","_","order"),(0,o.kt)("p",null,"Should the plugins be forced to run in the order they are defined"),(0,o.kt)("h4",{id:"parsers"},"parsers"),(0,o.kt)("p",null,"List of parsers to use. Parsers are used to parse the generated AST and translate it before it is converted to python code"),(0,o.kt)("h4",{id:"plugins"},"plugins"),(0,o.kt)("p",null,"List of plugins to use. Plugins are used to generated the python ast from the graphql documents, objects, etc."),(0,o.kt)("h4",{id:"processors"},"processors"),(0,o.kt)("p",null,"List of processors to use. Processor are used to enforce specific styles on the generated python code"),(0,o.kt)("h4",{id:"stylers"},"stylers"),(0,o.kt)("p",null,"List of stylers to use. Style are used to enforce specific styles on the generaded class or fieldnames."),(0,o.kt)("h2",{id:"extensions-objects"},"Extensions Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Extensions(BaseModel)\n")),(0,o.kt)("p",null,"Wrapping class to be able to extract the tums configuraiton"),(0,o.kt)("h4",{id:"turms"},"turms"),(0,o.kt)("p",null,"The turms configuration"),(0,o.kt)("h2",{id:"graphqlproject-objects"},"GraphQLProject Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class GraphQLProject(BaseSettings)\n")),(0,o.kt)("p",null,"Configuration for the GraphQL project"),(0,o.kt)("p",null,"This is the main configuration for one GraphQL project. It is compliant with\nthe graphql-config specification. And allows you to specify the schema and\nthe documents that should be parsed."),(0,o.kt)("p",null,"Turm will use the schema and documents to generate the python models, according\nto the generator configuration under extensions.turms"),(0,o.kt)("h4",{id:"schema_url"},"schema","_","url"),(0,o.kt)("p",null,"The schema url or path to the schema file"),(0,o.kt)("h4",{id:"bearer_token"},"bearer","_","token"),(0,o.kt)("p",null,"The bearer token to use for the schema if retrieving it from a remote url"),(0,o.kt)("h4",{id:"documents-1"},"documents"),(0,o.kt)("p",null,"The documents (operations,fragments) to parse"),(0,o.kt)("h4",{id:"extensions"},"extensions"),(0,o.kt)("p",null,"The extensions configuration for the project (here resides the turms configuration)"),(0,o.kt)("h2",{id:"graphqlconfigmultiple-objects"},"GraphQLConfigMultiple Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class GraphQLConfigMultiple(BaseSettings)\n")),(0,o.kt)("p",null,"Configuration for multiple GraphQL projects"),(0,o.kt)("p",null,"This is the main configuration for multiple GraphQL projects. It is compliant with\nthe graphql-config specification for multiple projec."),(0,o.kt)("h4",{id:"projects"},"projects"),(0,o.kt)("p",null,"The projects that should be parsed. The key is the name of the project and the value is the graphql project"),(0,o.kt)("h2",{id:"graphqlconfigsingle-objects"},"GraphQLConfigSingle Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class GraphQLConfigSingle(GraphQLProject)\n")),(0,o.kt)("p",null,"Configuration for a single GraphQL project"),(0,o.kt)("p",null,"This is the main configuration for a single GraphQL project. It is compliant with\nthe graphql-config specification for a single project."))}p.isMDXComponent=!0}}]);