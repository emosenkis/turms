"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5719],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,g=m["".concat(s,".").concat(f)]||m[f]||c[f]||l;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25534:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),o=["components"],i={sidebar_label:"run",title:"run"},s=void 0,p={unversionedId:"reference/run",id:"reference/run",title:"run",description:"load\\projects\\from\\_configpath",source:"@site/docs/reference/run.md",sourceDirName:"reference",slug:"/reference/run",permalink:"/turms/docs/reference/run",editUrl:"https://github.com/jhnnsrs/turms/edit/master/website/docs/reference/run.md",tags:[],version:"current",frontMatter:{sidebar_label:"run",title:"run"},sidebar:"tutorialSidebar",previous:{title:"registry",permalink:"/turms/docs/reference/registry"},next:{title:"utils",permalink:"/turms/docs/reference/utils"}},u=[{value:"load_projects_from_configpath",id:"load_projects_from_configpath",children:[],level:4},{value:"scan_folder_for_configs",id:"scan_folder_for_configs",children:[],level:4},{value:"scan_folder_for_single_config",id:"scan_folder_for_single_config",children:[],level:4},{value:"gen",id:"gen",children:[],level:4},{value:"instantiate",id:"instantiate",children:[],level:4},{value:"generate",id:"generate",children:[],level:4},{value:"generate_ast",id:"generate_ast",children:[],level:4}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"load_projects_from_configpath"},"load","_","projects","_","from","_","configpath"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def load_projects_from_configpath(config_path: str,\n                                  select: str = None\n                                  ) -> Dict[str, GraphQLProject]\n")),(0,l.kt)("p",null,"Loads the configuration from a configuration file"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config_path")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The path to the config file")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLConfig")," - The configuration")),(0,l.kt)("h4",{id:"scan_folder_for_configs"},"scan","_","folder","_","for","_","configs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def scan_folder_for_configs(folder_path: str = None) -> List[str]\n")),(0,l.kt)("p",null,"Scans a folder for config files"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"folder_path")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The path to the folder")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List[str]")," - The list of config files")),(0,l.kt)("h4",{id:"scan_folder_for_single_config"},"scan","_","folder","_","for","_","single","_","config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def scan_folder_for_single_config(folder_path: str = None) -> List[str]\n")),(0,l.kt)("p",null,"Scans a folder for one single config file"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"folder_path")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The path to the folder")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The config file")),(0,l.kt)("h4",{id:"gen"},"gen"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def gen(filepath: Optional[str] = None,\n        project_name: Optional[str] = None,\n        strict: bool = False,\n        overwrite_path: Optional[str] = None)\n")),(0,l.kt)("p",null,"Generates  Code according to the config file"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filepath")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The filepath of  graphqlconfig. Defaults to ",'"',"graphql.config.yaml",'"',"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"project")," ",(0,l.kt)("em",{parentName:"li"},"str, optional")," - The project within that should be generated. Defaults to None.")),(0,l.kt)("h4",{id:"instantiate"},"instantiate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def instantiate(module_path: str, **kwargs)\n")),(0,l.kt)("p",null,"Instantiate A class from a file."),(0,l.kt)("p",null,"Needs to conform to ",(0,l.kt)("inlineCode",{parentName:"p"},"path.to.module.ClassName")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"module_path")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The class path you would like to instatiate")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"object")," - The instatiated class.")),(0,l.kt)("h4",{id:"generate"},"generate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def generate(project: GraphQLProject) -> str\n")),(0,l.kt)("p",null,"Genrates the code according to the configugration"),(0,l.kt)("p",null,"The code is generated in the following order:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Introspect the schema (either url or locally)"),(0,l.kt)("li",{parentName:"ol"},"Generate the of grapqhl.ast from this schema"),(0,l.kt)("li",{parentName:"ol"},"Instantiate all plugins/parsers/stylers"),(0,l.kt)("li",{parentName:"ol"},"Generate the ast from the ast through the plugins and stylers"),(0,l.kt)("li",{parentName:"ol"},"Parse the Ast with the parsers"),(0,l.kt)("li",{parentName:"ol"},"Generate the code from the ast through ast.unparse"),(0,l.kt)("li",{parentName:"ol"},"Process the code string through the processors")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"project")," ",(0,l.kt)("em",{parentName:"li"},"GraphQLConfig")," - The configuraion for the generation")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The generated code")),(0,l.kt)("h4",{id:"generate_ast"},"generate","_","ast"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def generate_ast(config: GeneratorConfig,\n                 schema: GraphQLSchema,\n                 plugins: Optional[List[Plugin]] = None,\n                 stylers: Optional[List[Styler]] = None) -> List[ast.AST]\n")),(0,l.kt)("p",null,"Generates the ast from the schema"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config")," ",(0,l.kt)("em",{parentName:"li"},"GeneratorConfig")," - The generaion Config (turms section)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"schema")," ",(0,l.kt)("em",{parentName:"li"},"GraphQLSchema")," - The schema to generate the ast from"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"plugins")," ",(0,l.kt)("em",{parentName:"li"},"List","[Plugins]",", optional")," - The plugins to use. Defaults to []."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stylers")," ",(0,l.kt)("em",{parentName:"li"},"List","[Styler]",", optional")," - The plugins to use. Defaults to [].")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Raises"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"GenerationError")," - Errors involving the generation of the ast")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"List[ast.AST]")," - The generated ast (as list, not as module)")))}m.isMDXComponent=!0}}]);