"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6336],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,i(i({ref:t},l),{},{components:r})):n.createElement(m,i({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7070:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],c={sidebar_label:"operation",title:"types.operation"},s=void 0,p={unversionedId:"reference/types/operation",id:"reference/types/operation",title:"types.operation",description:"OperationMeta Objects",source:"@site/docs/reference/types/operation.md",sourceDirName:"reference/types",slug:"/reference/types/operation",permalink:"/turms/docs/reference/types/operation",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/types/operation.md",tags:[],version:"current",frontMatter:{sidebar_label:"operation",title:"types.operation"},sidebar:"tutorialSidebar",previous:{title:"object",permalink:"/turms/docs/reference/types/object"},next:{title:"scalar",permalink:"/turms/docs/reference/types/scalar"}},l=[{value:"OperationMeta Objects",id:"operationmeta-objects",children:[],level:2}],u={toc:l};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"operationmeta-objects"},"OperationMeta Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class OperationMeta(ModelMetaclass)\n")),(0,o.kt)("p",null,"The Model Meta class extends the Pydantic Metaclass and adds in\nsyncrhonous and asynchronous Managers. These Managers allow direct\ninteraction with serverside Objects mimicking the Django ORM Scheme\n(",(0,o.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/topics/db/queries/"},"https://docs.djangoproject.com/en/3.2/topics/db/queries/"),") it\nalso registeres the Model as a potential serializer."),(0,o.kt)("p",null,"Every Class using this metaclass has to subclass pydantic.BaseModel and\nimplement a Meta class with the identifier attribute set to a cleartext\nidentifier on the arkitekt platform."),(0,o.kt)("p",null,"If this identifier does not exist, the serializer can potentially be auto\nregistered with the platform according to the apps name"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ModelMetaclass")," ",(0,o.kt)("em",{parentName:"li"},"[type]")," - ","[description]")))}d.isMDXComponent=!0}}]);