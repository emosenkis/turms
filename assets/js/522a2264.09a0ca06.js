"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1196],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},38355:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={sidebar_position:1,sidebar_label:"Document Code Generation",title:"Generating Code from Documents"},l=void 0,c={unversionedId:"usecases/documents/client",id:"usecases/documents/client",title:"Generating Code from Documents",description:"Clients using a GraphQL API, generally can do so by calling specific operations on",source:"@site/docs/usecases/documents/client.md",sourceDirName:"usecases/documents",slug:"/usecases/documents/client",permalink:"/turms/docs/usecases/documents/client",editUrl:"https://github.com/jhnnsrs/turms/edit/master/website/docs/usecases/documents/client.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Document Code Generation",title:"Generating Code from Documents"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/turms/docs/usecases/intro"},next:{title:"Strawberry (Schema first)",permalink:"/turms/docs/usecases/schema/strawberry"}},u=[{value:"How to use turms for client-side document generation",id:"how-to-use-turms-for-client-side-document-generation",children:[],level:2},{value:"Example project",id:"example-project",children:[],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Clients using a GraphQL API, generally can do so by calling specific operations on\nthe graphQL schema (like a mutation, query, subscription). These operations are defined\nin the standard graphql SDL, and then together with the variables are send to the graphql\napi."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"\nfragment Continent on Continent {\n  code\n  name\n}\n\nquery get_countries($filter: CountryFilterInput) {\n  countries(filter: $filter) {\n    code\n    name\n    continent {\n      ...Continent\n    }\n  }\n}\n\n")),(0,a.kt)("p",null,"You can do this in ",(0,a.kt)("inlineCode",{parentName:"p"},"vanilla")," python by just sending the query as a string, and the\nvariables as json to the graphql api and deseralizing the JSON-response to a python\ndictionary. However this approach can be very error prone and can lead to run-time\nerrors especially in larger projects."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\nt = """\nfragment Continent on Continent {\n  code\n  name\n}\n\nquery get_countries($filter: CountryFilterInput) {\n  countries(filter: $filter) {\n    code\n    name\n    continent {\n      ...Continent\n    }\n  }\n}\n"""\n\nserver_reponse = client.post(t, variables={"filter": {"code": "eq": "22"}})\ncontinent_name = server_response["data"]["countries"][0]["continent"]["name"] # nested dictionaries\n\n')),(0,a.kt)("p",null,"Additionally you will not get any help from your IDE about the types and their nullability.\nWith turms you can easily generate typed operations from you SDL query, that will give you\nboth runtime checks and IDE type support."),(0,a.kt)("h2",{id:"how-to-use-turms-for-client-side-document-generation"},"How to use turms for client-side document generation"),(0,a.kt)("p",null,"Client side code is often structured around the graphql documents (not the schema), as the documents\ndescribe which data you want to retrieve from the API. Your documents are nothing more than\nSDL code describing your operations and (resuable) fragments, and are stored in your development\nenviroment (most often in a seperate folder)."),(0,a.kt)("p",null,"With turms installed we can now specify in the config where these documents are stored, and the\nschema it should use to infer the types from and use a modfieid battery of plugins to generate our python code from it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'projects:\n  default:\n    schema: https://countries.trevorblades.com/\n    documents: "your_documents/*.graphql" #a glob pattern where your documents are stored\n    extensions:\n      turms:\n        out_dir: "your_library" # the folder where we will generate schema.py with all the generated code\n        stylers: # stylers to convert graphQL naming style to python\n          - type: turms.stylers.capitalize.CapitalizeStyler\n          - type: turms.stylers.snake_case.SnakeCaseStyler\n        plugins: # the plugins to use\n          - type: "turms.plugins.enums.EnumsPlugin" #creates python enums from graphql enums\n          - type: "turms.plugins.inputs.InputsPlugin" # creates input types from grahqlinputtypes\n          - type: turms.plugins.fragments.FragmentsPlugin # scans your documents for fragments and generates them\n          - type: turms.plugins.operations.OperationsPlugin # scans your documents for queries, mutation, subscription\n        processors:\n          - type: turms.processors.black.BlackProcessor # enfores black styling\n          - type: turms.processors.isort.IsortProcessor # sorts the imports\n        scalar_definitions:\n          uuid: str\n          UUID: str # mapping UUID scalar to st\n          Callback: str\n          Any: typing.Any\n          QString: str\n          ID: str\n')),(0,a.kt)("p",null,"In this configuration turms will generated pydantic classes, from your documents, mapping to the defined GraphQL scalar types to their respective python types."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You might wonder, why we are not using pure dataclasses. This is mainly due turms support for graphql interfaces and unions, where we need to cast a returned type to the right datatype, somethign that is not possible with dataclasses by default, but easily done with pydantic and it deserialization."))),(0,a.kt)("p",null,"From the document in one turms will now generate the following generated code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from enum import Enum\nfrom typing import List, Literal, Optional\n\nfrom pydantic import BaseModel, Field\n\n\nclass StringQueryOperatorInput(BaseModel):\n    eq: Optional[str]\n    ne: Optional[str]\n    in_: Optional[List[Optional[str]]] = Field(alias="in")\n    nin: Optional[List[Optional[str]]]\n    regex: Optional[str]\n    glob: Optional[str]\n\n\nclass CountryFilterInput(BaseModel):\n    code: Optional[StringQueryOperatorInput]\n    currency: Optional[StringQueryOperatorInput]\n    continent: Optional[StringQueryOperatorInput]\n\n\nclass ContinentFilterInput(BaseModel):\n    code: Optional[StringQueryOperatorInput]\n\n\nclass LanguageFilterInput(BaseModel):\n    code: Optional[StringQueryOperatorInput]\n\n\nclass Continent(BaseModel):\n    typename: Optional[Literal["Continent"]] = Field(alias="__typename")\n    code: str\n    name: str\n\n\nclass Get_countriesCountries(BaseModel):\n    typename: Optional[Literal["Country"]] = Field(alias="__typename")\n    code: str\n    name: str\n    continent: Continent\n\n\nclass Get_countries(BaseModel):\n    countries: List[Get_countriesCountries]\n\n    class Arguments(BaseModel):\n        filter: Optional[CountryFilterInput] = None\n\n    class Meta:\n        document = "fragment Continent on Continent {\\n  code\\n  name\\n}\\n\\nquery get_countries($filter: CountryFilterInput) {\\n  countries(filter: $filter) {\\n    code\\n    name\\n    continent {\\n      ...Continent\\n    }\\n  }\\n}"\n\n')),(0,a.kt)("p",null,"In this example we can see that turms not only generated typed models for the query but also for the\narguments and the input types (if there were enums also all enums would have been generated)."),(0,a.kt)("p",null,"Now you can simple import these dataclasses and use them for (de-)serialization:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom your_library.schema import Get_countries, CountryFilterInput, StringQueryOperatorInput\n\n\nvariables = Get_countries.Arguments(filter=CountryFilterInput(code=StringQueryOperatorInput(eq="DE"))))\n\nt = client.post(Get_countries.Meta.document, variables.json())\ncountries = Get_countries(**t)\n\nfor i in countries.countries:\n    print(i.name)\n')),(0,a.kt)("p",null,'Additionally when using the "Funcs Plugin", we can even reduce this boilerplate code, down to function\ncalls like this:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'from your_library.schema import get_countries, CountryFilterInput, StringQueryOperatorInput\n\ncountries = get_countries(filter=CountryFilterInput(code=StringQueryOperatorInput(eq="DE")))\n\nfor i in countries.countries:\n    print(i.name)\n\n')),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If you don't like the verbosity of the nested, input types, you can also use pydantics validation\ncapabilite and pass the nested dictionary directly, pydantic will still do its runtime checking magic\nand give you serialization error."))),(0,a.kt)("h2",{id:"example-project"},"Example project"),(0,a.kt)("p",null,"In the example project (here)","[https://github.com/jhnnsrs/turms/tree/master/examples/pydantic-basic]",". We illustrate the necessary configuration to use code generation in a schema first approach."))}d.isMDXComponent=!0}}]);